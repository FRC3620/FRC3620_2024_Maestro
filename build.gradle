plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2024.3.2"
    // FRC3620 ****************************************************************
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    // later:
    // id 'com.diffplug.spotless' version '6.12.0'
    // ************************************************************************
}

var useG1GC = false
String jmxHost = null // "172.22.11.2"

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// FRC3620 ********************************************************************
compileJava.options.encoding = 'UTF-8' 
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'
// ****************************************************************************

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                    jvmArgs.add("-Dlog4j2.contextSelector=org.apache.logging.log4j.core.async.BasicAsyncLoggerContextSelector")
                    jvmArgs.add("-Dlog4j2.asyncLoggerRingBufferSize=256")
                    // jvmArgs.add("-Dlog4j2.debug=true")
                    if (useG1GC) {
                        gcType = 'Other'
                        jvmArgs.add("-XX:+UseG1GC")
                        jvmArgs.add("-XX:MaxGCPauseMillis=1")
                        jvmArgs.add("-XX:GCTimeRatio=1")
                    }
                    if (jmxHost != null) {
                        jvmArgs.add("-Dcom.sun.management.jmxremote=true")
                        jvmArgs.add("-Dcom.sun.management.jmxremote.port=1198")
                        jvmArgs.add("-Dcom.sun.management.jmxremote.authenticate=false")
                        jvmArgs.add("-Dcom.sun.management.jmxremote.ssl=false")
                        jvmArgs.add("-Djava.rmi.server.hostname=" + jmxHost)
                    }
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    predeploy << { execute 'find /home/lvuser/deploy'}
                    predeploy << { execute 'rm -rf /home/lvuser/deploy'}
                    predeploy << { execute 'find /home/lvuser/deploy'}
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    // implementation 'com.google.code.gson:gson:2.8.9'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.10'
    implementation group: 'org.slf4j', name: 'jul-to-slf4j', version: '2.0.10' // JUL bridge

    annotationProcessor("org.apache.logging.log4j:log4j-core:2.22.1")
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.22.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.22.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j2-impl', version: '2.22.1'

    // https://mvnrepository.com/artifact/com.lmax/disruptor
    implementation group: 'com.lmax', name: 'disruptor', version: '3.4.3'

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testImplementation 'junit:junit:4.13.1'
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.10.1") {
        because 'allows JUnit 3 and JUnit 4 tests to run'
    }
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    // FRC3620 ****************************************************************
    // this is so log4j2 can scan classes for plugins
    manifest {
        attributes(
                "Manifest-Version": "1.0",
                "Multi-Release": true
                )
    }
    // ************************************************************************
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

// FRC3620 ********************************************************************
// git wonderfulness

task printGitProperties {
    dependsOn generateGitProperties
    doLast {
        println "Project: " + project.ext.gitProps["project.dir"]
        println "Branch: " + project.ext.gitProps["git.branch"]
        println "Describe: " + project.ext.gitProps["git.commit.id.describe"]
        println "Dirty: "  + project.ext.gitProps["git.dirty"]
        println "Build time: " + project.ext.gitProps["build.time"]
        println "Build host: " + project.ext.gitProps["git.build.host"]
    }
}

def getBuildTime() {
    return new Date().toString();
}

gitProperties {
    // Customize directory using gitPropertiesResourceDir config
    // The directory in this config key is also added as a classpath entry
    // (so the git.properties file will be included in the final JAR file)
    customProperty "build.time", { getBuildTime() }
    customProperty "project.dir", { project.projectDir.getName() }
    customProperty 'git.commit.id.describe', { it.describe(tags: true, always: true) }
    gitPropertiesResourceDir = file("${project.rootDir}/src/main/deploy")
    extProperty = 'gitProps'
}
generateGitProperties.finalizedBy printGitProperties // make sure we do things in the correct order
generateGitProperties.outputs.upToDateWhen { false } // make sure the generateGitProperties task always executes (even when git.properties is not changed)

tasks.processResources.dependsOn generateGitProperties // make sure we do things in the correct order
// https://stackoverflow.com/a/70648216/17887564
tasks.processResources.outputs.upToDateWhen { false }  // make sure the processResources task always runs

// ****************************************************************************

// FRC3620 ********************************************************************

// this helps junit test results show up in output
// look at https://stackoverflow.com/a/36130467/17887564 for some more suggestions
tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        // events "passed", "failed" // , "started", "skipped"
        showStandardStreams true
        showExceptions true
    }
}

tasks.test {
    // only run tests if explicitly specified
    // https://discuss.gradle.org/t/dont-run-tests-unless-test-task-specified-on-command-line/33700/4 
    // run tests with .\gradlew test --tests <test-names>
    enabled = gradle.startParameter.taskNames.contains("test")
}

// spotless!
if (false) {
    spotless {
        java {
            target fileTree('.') {
                include '**/*.java'
                exclude '**/build/**', '**/build-*/**'
            }
            toggleOffOn()
            googleJavaFormat()
            removeUnusedImports()
            trimTrailingWhitespace()
            endWithNewline()
        }
        groovyGradle {
            target fileTree('.') {
                include '**/*.gradle'
                exclude '**/build/**', '**/build-*/**'
            }
            greclipse()
            indentWithSpaces(4)
            trimTrailingWhitespace()
            endWithNewline()
        }
        format 'xml', {
            target fileTree('.') {
                include '**/*.xml'
                exclude '**/build/**', '**/build-*/**'
            }
            eclipseWtp('xml')
            trimTrailingWhitespace()
            indentWithSpaces(2)
            endWithNewline()
        }
        format 'misc', {
            target fileTree('.') {
                include '**/*.md', '**/.gitignore'
                exclude '**/build/**', '**/build-*/**'
            }
            trimTrailingWhitespace()
            indentWithSpaces(2)
            endWithNewline()
        }
    }
}

if (false) {

    task clearDeploy {
        print "clearing deploy"
    }

    tasks.deployfrcStaticFileDeployroborio.dependsOn clearDeploy

    gradle.taskGraph.whenReady {taskGraph ->
        println "Tasks"
        taskGraph.getAllTasks().eachWithIndex{ task, n ->
            println "${n + 1} $task"
            task.dependsOn.eachWithIndex{ depObj, m ->
                println "  ${ m + 1 } $depObj"
            }
        }
    } 
}
// ****************************************************************************
